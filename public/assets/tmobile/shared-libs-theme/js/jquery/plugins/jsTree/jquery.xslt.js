var xslTransform={version:20071203,debug:false,init:function(){try{parseFloat(jQuery.fn.jquery)>=1}catch(a){alert("xslTransform requires jQuery 1.0.4 or greater ... please load it prior to xslTransform")}try{Sarissa}catch(a){alert("Missing Sarissa ... please load it prior to xslTransform")}if(!jQuery.log){jQuery.log=function(){};jQuery.fn.debug=function(){}}if(this.debug){jQuery.log("xslTransform:init(): version "+xslTransform.version)}},XMLSerializer:new XMLSerializer(),serialize:function(a){if(this.debug){jQuery.log("serialize(): received "+typeof(a))}if(typeof(a)=="string"){return a}return this.XMLSerializer.serializeToString(a)},load:function(b,a){if(this.debug){jQuery.log("load(): received "+typeof(b))}var c;if(typeof(b)=="object"){return b}if(b.substring(0,1)=="<"){c=this.loadString(b)}else{c=this.loadFile(b,a)}if(c){c.setProperty("SelectionNamespaces",'xmlns:xsl="http://www.w3.org/1999/XSL/Transform"');c.setProperty("SelectionLanguage","XPath");return c}else{if(this.debug){jQuery.log("Unable to load "+b)}return false}},loadString:function(c){if(this.debug){jQuery.log("loadString(): "+c+"::"+typeof(c))}var b=new DOMParser();var a=b.parseFromString(c,"text/xml");if(!a){if(this.debug){jQuery.log("loadString(): parseFromString() failed")}return false}return a},loadFile:function(b,a){if(this.debug){jQuery.log("loadFile(): "+b+"::"+typeof(b))}if(!b){if(this.debug){jQuery.log("ERROR: loadFile() missing url")}return false}var c;this.xhrsuccess=function(d,e){if(this.debug){jQuery.log("loadFile() completed successfully ("+e+")")}c=d;return true};this.xhrerror=function(e,d){window.DEBUG=true;if(this.debug){jQuery.log("loadFile() failed to load the requested file: ("+d+") - xml: "+e.responseXML+" - text: "+e.responseText)}c=null;return false};if(!a){a="GET"}jQuery.ajax({type:a,url:b,async:false,success:this.xhrsuccess,error:this.xhrerror});if(!c){if(this.debug){jQuery.log("ERROR: document "+b+" not found (404), or unable to load")}return false}if(c.length==0){if(this.debug){jQuery.log("ERROR: document "+b+" loaded in loadFile() has no data")}return false}return c},transform:function(d,c,b){var f={xsl:d,xml:c,options:b};if(this.debug){jQuery.log("transform(): "+d+"::"+c+"::"+b.toString())}b=b||{};var c={request:c,doc:this.load(c,b.meth)};if(b.xpath&&c.doc&&!jQuery.browser.msie){c.doc=c.doc.selectSingleNode(b.xpath.toString());if(this.debug){jQuery.log("transform(): xpath has been run...resulting doc: "+(this.serialize(c.doc)))}}var a={xsl:this.load(d,b.meth)};a.json=false;if(b.json&&c.doc){a.json=c.doc.selectSingleNode(b.json.toString())}var e=new XSLTProcessor();e.importStylesheet(a.xsl);if(b.params&&e){if(this.debug){jQuery.log("transform(): received xsl params: "+b.params.toString())}for(key in b.params){e.setParameter(null,key.toString(),b.params[key].toString())}}a.doc=e.transformToDocument(c.doc);var g=Sarissa.getParseErrorText(a.doc);if(this.debug){jQuery.log("transform(): Sarissa parse text: "+g)}if(g!=Sarissa.PARSED_OK){a.string=Sarissa.getParseErrorText(a.doc)+" :: using "+d+" => "+c.request;if(this.debug){jQuery.log("transform(): error in transformation: "+Sarissa.getParseErrorText(a.doc))}return a}a.string=this.serialize(a.doc);a.scripts=jQuery("script",a.doc).text();return a}};xslTransform.init();jQuery.fn.getTransform=function(xsl,xml,options){var settings={append:false,params:{},xpath:"",eval:true,callback:"",json:false,meth:"GET"};jQuery.extend(settings,options);if(xslTransform.debug){jQuery.log("getTransform: "+xsl+"::"+xml+"::"+settings.toString())}if(!xsl||!xml){if(xslTransform.debug){jQuery.log("getTransform: missing xsl or xml")}return}return this.each(function(){var trans=xslTransform.transform(xsl,xml,settings);var re=trans.string.match(/<\?xml.*?\?>/);if(re){trans.string=trans.string.replace(re,"");if(xslTransform.debug){jQuery.log("getTransform(): found an xml declaration and removed it")}}try{if(settings.append){jQuery(this).append(trans.string)}else{if(settings.repl){jQuery(this).replaceWith(trans.string)}else{jQuery(this).html(trans.string)}}}catch(e){if(xslTransform.debug){jQuery.log("getTransform: error placing results of transform into element, falling back to innerHTML: "+e.toString())}jQuery(this)[0].innerHTML=trans.string}if(settings.eval&&trans.scripts){if(trans.scripts.length>0){if(xslTransform.debug){jQuery.log("Found text/javascript in transformed result")}eval.call(window,trans.scripts)}}if(settings.callback&&jQuery.isFunction(settings.callback)){var json=false;if(settings.json&&trans.json){eval("json = "+trans.json.firstChild.data)}settings.callback.apply(window,[trans.string,json])}})};